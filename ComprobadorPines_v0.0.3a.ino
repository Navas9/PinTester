/****************************************************
 * +Nombre del Proyecto: Tester conectores de aviónica
 *
 * +Descripción:       Comprobador de continuidad y conexionado
                      para diversos conectores de aviónica, el
                      código incluye modos de 6, 10 pines y
                      detección automática del tipo de conector.
 * +Autores:           S.A. Muñoz Hernández, Antonio / S.A. Navas Almanzor, Carlos
 * +Fecha:             07/07/2024
 * +Versión:           0.0.3b
 * +Repositorio Github: https://github.com/Navas9/PinTester
 * 
 * +Créditos y Referencias:
 *
 * - Biblioteca Adafruit SSD1306 para el display Oled:
 *   https://github.com/adafruit/Adafruit_SSD1306
 * - Para el manejo del encoder:
 *   https://github.com/PaulStoffregen/Encoder
 *   https://lastminuteengineers.com/rotary-encoder-arduino-tutorial
 * - Convertidor de imágenes en array de bits para usar con pantallas:
 *   https://github.com/javl/image2cpp
 * 
 *
 * +Agradecimientos:
 *
 * - Cap. HÉCTOR (ABA): Material prestado, MOTIVACIÓN y GANAS DE HACER COSAS.
 * - Sgto. 1º UBAGO (ARMILLA): Material prestado indefinidamente.
 * - Nuestras madres (Siempre, va por vosotras)
 *
 * Proyecto co-financiado en su mayoría por los españoles de bien y en parte también de nuestro bolsillo.
 *****************************************************/

//Librerías
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_WIDTH 128  // Ancho display Oled (pixeles)
#define OLED_HEIGHT 64  // Altura display Oled (pixeles)

//***********************MENU*******************************************
// Pines del encoder
#define ENCODER_A_PIN 2
#define ENCODER_B_PIN 3
#define ENCODER_BUTTON_PIN 4

// Declaración de variables para almacenar los valores/posición del encoder
volatile int encoderPos = 0;
volatile int lastEncoded = 0;
volatile long lastEncoderTime = 0;

//Opciones del menú
const int MENU_SIZE = 3;
const char *menuOptions[MENU_SIZE] = { "10-PIN", "6-PIN", "AUTO-P" };
int selecOpcion = 0;

//***********************************************************************

//Display Oled conectado por I2C
Adafruit_SSD1306 oled(OLED_WIDTH, OLED_HEIGHT, &Wire, -1);

// Pines del multiplexor
const int S0 = 8;
const int S1 = 9;
const int S2 = 10;
const int S3 = 11;
const int SIG_PIN = A0;  // Pin de señal

// Número de salidas del multiplexor
int MAX_SALIDAS = 10;

//Variable para detectar el tipo de conector
int valorConector = 0;

// Bitmap de la imagen a mostrar en pantalla
const unsigned char LogoAba[] PROGMEM = {
  // Logo pantalla 128x64px
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x30, 0x3f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x09, 0x9f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x04, 0xdf, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x42, 0xcf, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x21, 0x2f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x21, 0x0f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0xc7, 0x27, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0x97, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x3f, 0x87, 0xfb, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xc3, 0xe8, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xc0, 0x07, 0xdb, 0xc8, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x06, 0x00, 0x18, 0x03, 0xc3, 0xc8, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x18, 0x00, 0x06, 0x01, 0xd9, 0x88, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0x20, 0x00, 0x01, 0x00, 0xed, 0x10, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xd4, 0xc0, 0x00, 0x00, 0xc0, 0xec, 0x90, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0x95, 0x00, 0x00, 0x02, 0x20, 0x70, 0xa0, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0x00, 0x00, 0x00, 0x03, 0x10, 0x30, 0x60, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0x32, 0x00, 0x00, 0x03, 0xd0, 0x3f, 0xc1, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xd6, 0x7e, 0xd4, 0x00, 0x00, 0x01, 0xe8, 0x1f, 0xc1, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x28, 0x00, 0x40, 0x03, 0xe4, 0x1f, 0x83, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xa8, 0x03, 0x00, 0x03, 0xe4, 0x0f, 0x83, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x8e, 0xfd, 0x10, 0x70, 0x03, 0xc3, 0xe2, 0x0f, 0x07, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x0e, 0x6c, 0x90, 0x7e, 0x3f, 0xf3, 0xe2, 0x0f, 0x67, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x06, 0xf8, 0x90, 0x00, 0x7e, 0x63, 0xe0, 0x07, 0x6f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x03, 0xf9, 0x80, 0x00, 0xfe, 0x33, 0xe1, 0x06, 0x0f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x04, 0xf9, 0x21, 0xfd, 0xf0, 0x63, 0xf1, 0x06, 0x8f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x1e, 0xf9, 0xa3, 0xff, 0xf8, 0x01, 0xf9, 0x06, 0x6f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xaf, 0xfc, 0xfb, 0xa3, 0xff, 0xfe, 0x03, 0xf9, 0x06, 0xcf, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xa3, 0x7f, 0x9f, 0x03, 0xf9, 0x06, 0x0f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xef, 0xfc, 0xf9, 0x21, 0xff, 0x9f, 0x03, 0xf9, 0x06, 0xef, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x6e, 0xfb, 0xa0, 0x1f, 0x89, 0x03, 0xf9, 0x06, 0x2f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x1e, 0xf9, 0x21, 0x1f, 0x81, 0xc3, 0xf9, 0x06, 0x4f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x00, 0xfb, 0xa0, 0x1f, 0xc9, 0x03, 0xe1, 0x07, 0x2f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x03, 0xf8, 0x20, 0x3d, 0xf3, 0x83, 0xe1, 0x07, 0x2f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x06, 0xe8, 0x13, 0x70, 0x61, 0x03, 0xe0, 0x0f, 0x77, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x0e, 0xfd, 0x51, 0xc0, 0x20, 0x03, 0xe2, 0x0f, 0x07, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd, 0x53, 0xa0, 0x70, 0x03, 0xe2, 0x0f, 0x87, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x7e, 0x88, 0x80, 0x20, 0x03, 0xe4, 0x0f, 0x83, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x48, 0x00, 0x00, 0x03, 0xe4, 0x1f, 0x83, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xd6, 0xfe, 0xc4, 0x00, 0x00, 0x03, 0xc8, 0x1f, 0xc1, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xc1, 0x3f, 0x12, 0x00, 0x00, 0x03, 0x90, 0x39, 0xc1, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe1, 0xbf, 0xb9, 0x00, 0x00, 0x03, 0x10, 0x30, 0x60, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0x81, 0x80, 0x00, 0x02, 0x20, 0x76, 0xa0, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd4, 0x40, 0x00, 0x00, 0xc0, 0xe1, 0x90, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0x20, 0x00, 0x01, 0x01, 0xe5, 0x90, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x18, 0x00, 0x06, 0x01, 0xd9, 0xc8, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x06, 0x00, 0x18, 0x03, 0xcb, 0xc8, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xc0, 0x0f, 0xdb, 0xe8, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xc3, 0xf8, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xbb, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xff, 0x97, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xc1, 0x97, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x21, 0x67, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x23, 0x2f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x42, 0x8f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x04, 0x5f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x19, 0xbf, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x7f, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

String inputString = "";
bool stringComplete = false;


void setup() {

  //************************MENU***********************
  pinMode(ENCODER_A_PIN, INPUT_PULLUP);
  pinMode(ENCODER_B_PIN, INPUT_PULLUP);
  pinMode(ENCODER_BUTTON_PIN, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(ENCODER_A_PIN), leerEncoder, CHANGE);
  attachInterrupt(digitalPinToInterrupt(ENCODER_B_PIN), leerEncoder, CHANGE);

  //**************************************************

  //Inicialización del display en 0x3C
  if (!oled.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 direcion incorrecta"));
    while (true)
      ;
  }

  delay(2000);          //Retardo necesario para dejar que cargue la pantalla
  oled.clearDisplay();  // Limpia la pantalla

  //Muestra el logo de nuestra amada ABA en pantalla
  oled.drawBitmap(0, 0, LogoAba, 128, 64, WHITE);
  oled.display();
  delay(2000);

  oled.invertDisplay(1);
  delay(5000);

  // Configuración de pines del multiplexor como salidas
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);

  // Pin de señal como entrada
  pinMode(SIG_PIN, INPUT);

  // Pin de valor del conector como entrada
  pinMode(valorConector, INPUT);

  // Inicio comunicación serial
  Serial.begin(9600);
  inputString.reserve(200);

  //Reset de pantalla y configuración de los textos a mostrar
  oled.clearDisplay();       // Limpia la pantalla
  oled.setTextSize(3);       //Tamaño del texto
  oled.setTextColor(WHITE);  //Color del texto
  oled.setCursor(10, 10);    //Posición del texto
  oled.println("Pines:");    //
  oled.display();            // show on OLED
}

void loop() {

      if (stringComplete)
    {
        inputString.trim();  // if any new line, carriage return empty space
        Serial.println(inputString);
        // process the command
        if (inputString.equals("#On"))
        {
          Serial.println("INICIO TEST");
            testPin();
        }
//        else if (inputString.equals("#Off"))
//       {
//          Serial.println("FIN TEST");
//        }

        // clear the string:
        inputString = "";
        stringComplete = false;
    }

  valorConector = analogRead(A1);
  if (valorConector > 620) {
    Serial.println("#C10");
  }
  if (valorConector < 600) {
    Serial.println("#C6");
  }
  //else{Serial.println("#C0");}
  delay(200);

  if (encoderPos != lastEncoded) {
    if (millis() - lastEncoderTime > 50) {
      if (encoderPos > lastEncoded) {
        selecOpcion = (selecOpcion + 1) % MENU_SIZE;
      } else {
        selecOpcion = (selecOpcion - 1 + MENU_SIZE) % MENU_SIZE;
      }
      oled.clearDisplay();
      oled.setCursor(0, 10);
      oled.println(menuOptions[selecOpcion]);
      oled.display();
      lastEncoded = encoderPos;
    }
  }

  if (digitalRead(ENCODER_BUTTON_PIN) == LOW) {
    // Realizar la acción correspondiente a la opción seleccionada
    switch (selecOpcion) {
      case 0:  // Opción 10 Pines
        MAX_SALIDAS = 10;
        testPin();
        break;
      case 1:  // Opción 6 Pines
        MAX_SALIDAS = 6;
        testPin();
        break;
      case 2:  // Opción 4 Pines
        if (valorConector > 800) {
          MAX_SALIDAS = 10;
          testPin();
        }
        if (valorConector < 500 && valorConector > 400) {
          MAX_SALIDAS = 6;
          testPin();
        } else {
          break;
        }
        break;
      default:
        break;
    }
    delay(300);  // Retardo para evitar rebotes al pulsar el botón
  }
}